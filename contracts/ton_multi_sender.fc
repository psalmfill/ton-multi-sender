#include "imports/stdlib.fc";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

const int ton_for_fee = 100000000;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;
global slice owner;
global int send_excesses_to_sender;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(256);
    ctx_counter = ds~load_uint(256);
    owner = ds~load_msg_addr();
    send_excesses_to_sender = ds~load_uint(8);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 256)
            .store_uint(ctx_counter, 256)
            .store_slice(owner)
            .store_uint(ctx_counter, 8)
            .end_cell()
    );
}

() send_transfer(slice dest, int value) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(dest)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell(), 1);
}

() send_excesses(slice dest) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_slice("Excesses")
    .end_cell(), 128);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    int query_id = in_msg_body~load_uint(64);

    int counter = 0;

    load_data();

    if(op == 1){

        ;; Extract the total amount of coins from the message
        int total_coins = in_msg_body~load_coins();

        ;; Extract the transaction list
        cell transfer_list = in_msg_body~load_ref();

        do {
            var (item_index, item, f?) = transfer_list~udict::delete_get_min(64);

            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit due to limits of action list size
                    throw(399);
                }
                int value = item~load_coins();
                slice dest = item~load_msg_addr();
                total_coins -= value;
                ctx_counter += 1;
                send_transfer(dest, value);
            }
        } until ( ~ f?);


        ctx_id += 1; 


        if(total_coins > 0) {
            ;; return excesses to the owner address
            slice receiver = owner;
            if(send_excesses_to_sender == 1){
                receiver = sender;
            }
            send_excesses(receiver);
        }
        save_data();
        return ();
    }
    throw_unless(401, equal_slices_bits(sender, owner));

    if(op == 2){;; change owner

        slice new_owner = in_msg_body~load_msg_addr();

        owner = new_owner;

        save_data();
     
        return ();
    }

    if(op == 3){;; change send_excesses_to_sender

        send_excesses_to_sender = in_msg_body~load_uint(8);

        save_data();
     
        return ();
    }

    if(op == 4){;; reset counter

        int value = in_msg_body~load_uint(8);

        if(value == 1){
            ctx_counter = 0;
            ctx_id = 0;
        }

        save_data();
     
        return ();
    }


    ;; load_data(); ;; here we populate the storage variables

    ;; int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;; int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; if (op == op::increase) {
    ;;     int increase_by = in_msg_body~load_uint(32);
    ;;     ctx_counter += increase_by;
    ;;     save_data();
    ;;     return ();
    ;; }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

int get_send_excesses_to_sender() method_id {
    load_data();
    return send_excesses_to_sender;
}

slice get_owner() method_id {
    load_data();
    return owner;
}
